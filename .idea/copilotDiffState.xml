<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/demo1/Controllers/AuthController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/demo1/Controllers/AuthController.java" />
              <option name="originalContent" value="package com.demo1.Controllers;&#10;&#10;import com.demo1.Menus;&#10;import com.demo1.Models.User;&#10;import com.demo1.Services.AuthService;&#10;import com.demo1.Services.impliment.AuthServiceImplement;&#10;&#10;import java.util.Scanner;&#10;&#10;public class AuthController {&#10;&#10;    private static final Scanner scanner = new Scanner(System.in);&#10;    private static final AuthService authService = new AuthServiceImplement();&#10;&#10;    public static void Login(){&#10;        System.out.println(&quot;======== Login ========&quot;);&#10;        System.out.print(&quot;email : &quot;);&#10;        String loginEmail = scanner.nextLine().trim();&#10;        System.out.print(&quot;password : &quot;);&#10;        String password = scanner.nextLine();&#10;&#10;        User loggedIn = authService.Login(loginEmail, password);&#10;&#10;        if (loggedIn != null) {&#10;            boolean running = true;&#10;            while (running) {&#10;                System.out.println(&quot;\n=== MENU &quot; + loggedIn.getRole() + &quot; ===&quot;);&#10;                switch (loggedIn.getRole()) {&#10;                    case ADMIN:&#10;                        Menus.showAdminMenu();&#10;                        System.out.print(&quot;choice: &quot;);&#10;                        int choice1 = readInt();&#10;                        Menus.choiceMenuAdmin(choice1);&#10;                        break;&#10;                    case TELLER:&#10;                        Menus.showTellerMenu();&#10;                        System.out.print(&quot;choice: &quot;);&#10;                        int choice2 = readInt();&#10;                        Menus.choiceMenuTeller(choice2);&#10;                        break;&#10;                    case MANAGER:&#10;                        Menus.showManagerMenu();&#10;                        System.out.print(&quot;choice: &quot;);&#10;                        int choice3 = readInt();&#10;                        Menus.choiceMenuManager(choice3);&#10;                        break;&#10;                    case AUDITOR:&#10;                        Menus.showAuditorMenu();&#10;                        System.out.print(&quot;choice: &quot;);&#10;                        int choice4 = readInt();&#10;                        Menus.choiceMenuAuditor(choice4);&#10;                        break;&#10;                }&#10;            }&#10;        } else {&#10;            System.out.println(&quot;Login failed !&quot;);&#10;            Login();&#10;        }&#10;    }&#10;&#10;    private static int readInt() {&#10;        while (true) {&#10;            String line = scanner.nextLine();&#10;            try {&#10;                return Integer.parseInt(line.trim());&#10;            } catch (NumberFormatException ex) {&#10;                System.out.print(&quot;Nombre invalide, réessayez: &quot;);&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.demo1.Controllers;&#10;&#10;import com.demo1.Menus;&#10;import com.demo1.Models.User;&#10;import com.demo1.Services.AuthService;&#10;import com.demo1.Services.impliment.AuthServiceImplement;&#10;import com.demo1.Exceptions.BusinessRuleViolationException;&#10;&#10;import java.util.Scanner;&#10;&#10;public class AuthController {&#10;&#10;    private static final Scanner scanner = new Scanner(System.in);&#10;    private static final AuthService authService = new AuthServiceImplement();&#10;&#10;    public static void Login(){&#10;        while (true) {&#10;            System.out.println(&quot;======== Login ========&quot;);&#10;            System.out.print(&quot;email : &quot;);&#10;            String loginEmail = scanner.nextLine().trim();&#10;            System.out.print(&quot;password : &quot;);&#10;            String password = scanner.nextLine();&#10;            try {&#10;                User loggedIn = authService.Login(loginEmail, password);&#10;                if (loggedIn != null) {&#10;                    boolean running = true;&#10;                    while (running) {&#10;                        System.out.println(&quot;\n=== MENU &quot; + loggedIn.getRole() + &quot; ===&quot;);&#10;                        switch (loggedIn.getRole()) {&#10;                            case ADMIN:&#10;                                Menus.showAdminMenu();&#10;                                System.out.print(&quot;choice: &quot;);&#10;                                int choice1 = readInt();&#10;                                Menus.choiceMenuAdmin(choice1);&#10;                                break;&#10;                            case TELLER:&#10;                                Menus.showTellerMenu();&#10;                                System.out.print(&quot;choice: &quot;);&#10;                                int choice2 = readInt();&#10;                                Menus.choiceMenuTeller(choice2);&#10;                                break;&#10;                            case MANAGER:&#10;                                Menus.showManagerMenu();&#10;                                System.out.print(&quot;choice: &quot;);&#10;                                int choice3 = readInt();&#10;                                Menus.choiceMenuManager(choice3);&#10;                                break;&#10;                            case AUDITOR:&#10;                                Menus.showAuditorMenu();&#10;                                System.out.print(&quot;choice: &quot;);&#10;                                int choice4 = readInt();&#10;                                Menus.choiceMenuAuditor(choice4);&#10;                                break;&#10;                        }&#10;                    }&#10;                    return; // exit login loop after session ends&#10;                } else {&#10;                    System.out.println(&quot;Invalid credentials. Please try again.\n&quot;);&#10;                }&#10;            } catch (BusinessRuleViolationException ex) {&#10;                System.out.println(ex.getMessage());&#10;                System.out.println();&#10;            }&#10;        }&#10;    }&#10;&#10;    private static int readInt() {&#10;        while (true) {&#10;            String line = scanner.nextLine();&#10;            try {&#10;                return Integer.parseInt(line.trim());&#10;            } catch (NumberFormatException ex) {&#10;                System.out.print(&quot;Nombre invalide, réessayez: &quot;);&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/demo1/Controllers/ClientController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/demo1/Controllers/ClientController.java" />
              <option name="originalContent" value="package com.demo1.Controllers;&#10;&#10;import com.demo1.Models.Client;&#10;import com.demo1.Services.ClientService;&#10;import com.demo1.Services.impliment.ClientServiceImplement;&#10;&#10;import java.math.BigDecimal;&#10;import java.math.RoundingMode;&#10;import java.util.List;&#10;import java.util.Scanner;&#10;import java.util.regex.Pattern;&#10;&#10;public class ClientController {&#10;&#10;    private static final Scanner scanner = new Scanner(System.in);&#10;    private static final ClientService clientService = new ClientServiceImplement();&#10;&#10;    private static final Pattern EMAIL_PATTERN = Pattern.compile(&quot;^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$&quot;);&#10;&#10;    public static void saveClient(){&#10;        System.out.println(&quot;=========== Create Client ==========\n&quot;);&#10;&#10;        String fullName = promptNonEmpty(&quot;Full Name: &quot;);&#10;        String address = promptNonEmpty(&quot;Address: &quot;);&#10;        String email = promptEmail(&quot;Email: &quot;);&#10;        BigDecimal salary = promptPositiveAmount(&quot;Salary: &quot;);&#10;&#10;        Client client = clientService.save(fullName, address, email, salary.setScale(2, RoundingMode.HALF_UP).doubleValue(), Client.Currency.MAD);&#10;        System.out.println(&quot;Client created successfully with ID: &quot; + client.getId());&#10;    }&#10;&#10;    public static void editClient(){&#10;        System.out.println(&quot;=========== Edit Client ==========\n&quot;);&#10;        String recentEmail = promptNonEmpty(&quot;Current Email: &quot;);&#10;        Client existing = clientService.findByEmail(recentEmail);&#10;        if (existing == null) {&#10;            System.out.println(&quot;Client not found.&quot;);&#10;            return;&#10;        }&#10;        String fullName = promptNonEmpty(&quot;New Full Name: &quot;);&#10;        String address = promptNonEmpty(&quot;New Address: &quot;);&#10;        String email = promptEmail(&quot;New Email: &quot;);&#10;        BigDecimal salary = promptPositiveAmount(&quot;New Salary: &quot;);&#10;        clientService.editClient(fullName, address, email, salary.setScale(2, RoundingMode.HALF_UP).doubleValue(), existing.getCurrency(), recentEmail);&#10;        System.out.println(&quot;Client updated successfully!&quot;);&#10;    }&#10;&#10;    public static void deleteClient(){&#10;        System.out.println(&quot;=========== Delete Client ==========\n&quot;);&#10;        String email = promptEmail(&quot;Email of client to delete: &quot;);&#10;        Client existing = clientService.findByEmail(email);&#10;        if (existing == null) {&#10;            System.out.println(&quot;Client not found.&quot;);&#10;            return;&#10;        }&#10;        if (confirm(&quot;Are you sure you want to delete this client?&quot;)) {&#10;            clientService.deleteClient(existing);&#10;        } else {&#10;            System.out.println(&quot;Deletion cancelled.&quot;);&#10;        }&#10;    }&#10;&#10;    public static void listClients(){&#10;        System.out.println(&quot;=========== Clients ==========\n&quot;);&#10;        List&lt;Client&gt; clients = clientService.findAll();&#10;        if (clients.isEmpty()) {&#10;            System.out.println(&quot;No clients found.&quot;);&#10;        } else {&#10;            clients.forEach(System.out::println);&#10;        }&#10;    }&#10;&#10;    private static boolean confirm(String message) {&#10;        while (true) {&#10;            System.out.print(message + &quot; (y/n): &quot;);&#10;            String in = scanner.nextLine();&#10;            if (&quot;y&quot;.equalsIgnoreCase(in)) return true;&#10;            if (&quot;n&quot;.equalsIgnoreCase(in)) return false;&#10;            System.out.println(&quot;Please answer with 'y' or 'n'.&quot;);&#10;        }&#10;    }&#10;&#10;    private static String promptNonEmpty(String label) {&#10;        while (true) {&#10;            System.out.print(label);&#10;            String v = scanner.nextLine();&#10;            if (v != null) {&#10;                v = v.trim();&#10;            }&#10;            if (v != null &amp;&amp; !v.isEmpty()) {&#10;                return v;&#10;            }&#10;            System.out.println(&quot;Value is required. Please try again.&quot;);&#10;        }&#10;    }&#10;&#10;    private static String promptEmail(String label) {&#10;        while (true) {&#10;            String e = promptNonEmpty(label);&#10;            if (EMAIL_PATTERN.matcher(e).matches()) {&#10;                return e;&#10;            }&#10;            System.out.println(&quot;Invalid email format. Please try again.&quot;);&#10;        }&#10;    }&#10;&#10;    private static BigDecimal promptPositiveAmount(String label) {&#10;        while (true) {&#10;            System.out.print(label);&#10;            String input = scanner.nextLine();&#10;            try {&#10;                BigDecimal amount = new BigDecimal(input).setScale(2, RoundingMode.HALF_UP);&#10;                if (amount.compareTo(BigDecimal.ZERO) &gt; 0) {&#10;                    return amount;&#10;                }&#10;                System.out.println(&quot;Amount must be strictly positive.&quot;);&#10;            } catch (NumberFormatException ex) {&#10;                System.out.println(&quot;Invalid number. Please enter a numeric value (e.g., 1234.56).&quot;);&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.demo1.Controllers;&#10;&#10;import com.demo1.Models.Client;&#10;import com.demo1.Services.ClientService;&#10;import com.demo1.Services.impliment.ClientServiceImplement;&#10;import com.demo1.Exceptions.BusinessRuleViolationException;&#10;&#10;import java.math.BigDecimal;&#10;import java.math.RoundingMode;&#10;import java.util.List;&#10;import java.util.Scanner;&#10;import java.util.regex.Pattern;&#10;&#10;public class ClientController {&#10;&#10;    private static final Scanner scanner = new Scanner(System.in);&#10;    private static final ClientService clientService = new ClientServiceImplement();&#10;&#10;    private static final Pattern EMAIL_PATTERN = Pattern.compile(&quot;^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$&quot;);&#10;&#10;    public static void saveClient(){&#10;        System.out.println(&quot;=========== Create Client ==========\n&quot;);&#10;        try {&#10;            String fullName = promptNonEmpty(&quot;Full Name: &quot;);&#10;            String address = promptNonEmpty(&quot;Address: &quot;);&#10;            String email = promptEmail(&quot;Email: &quot;);&#10;            BigDecimal salary = promptPositiveAmount(&quot;Salary: &quot;);&#10;&#10;            Client client = clientService.save(fullName, address, email, salary.setScale(2, RoundingMode.HALF_UP).doubleValue(), Client.Currency.MAD);&#10;            System.out.println(&quot;Client created successfully with ID: &quot; + client.getId());&#10;        } catch (BusinessRuleViolationException ex) {&#10;            System.out.println(ex.getMessage());&#10;        }&#10;    }&#10;&#10;    public static void editClient(){&#10;        System.out.println(&quot;=========== Edit Client ==========\n&quot;);&#10;        String recentEmail = promptNonEmpty(&quot;Current Email: &quot;);&#10;        Client existing = clientService.findByEmail(recentEmail);&#10;        if (existing == null) {&#10;            System.out.println(&quot;Client not found.&quot;);&#10;            return;&#10;        }&#10;        String fullName = promptNonEmpty(&quot;New Full Name: &quot;);&#10;        String address = promptNonEmpty(&quot;New Address: &quot;);&#10;        String email = promptEmail(&quot;New Email: &quot;);&#10;        BigDecimal salary = promptPositiveAmount(&quot;New Salary: &quot;);&#10;        clientService.editClient(fullName, address, email, salary.setScale(2, RoundingMode.HALF_UP).doubleValue(), existing.getCurrency(), recentEmail);&#10;        System.out.println(&quot;Client updated successfully!&quot;);&#10;    }&#10;&#10;    public static void deleteClient(){&#10;        System.out.println(&quot;=========== Delete Client ==========\n&quot;);&#10;        String email = promptEmail(&quot;Email of client to delete: &quot;);&#10;        Client existing = clientService.findByEmail(email);&#10;        if (existing == null) {&#10;            System.out.println(&quot;Client not found.&quot;);&#10;            return;&#10;        }&#10;        if (confirm(&quot;Are you sure you want to delete this client?&quot;)) {&#10;            clientService.deleteClient(existing);&#10;        } else {&#10;            System.out.println(&quot;Deletion cancelled.&quot;);&#10;        }&#10;    }&#10;&#10;    public static void listClients(){&#10;        System.out.println(&quot;=========== Clients ==========\n&quot;);&#10;        List&lt;Client&gt; clients = clientService.findAll();&#10;        if (clients.isEmpty()) {&#10;            System.out.println(&quot;No clients found.&quot;);&#10;        } else {&#10;            clients.forEach(System.out::println);&#10;        }&#10;    }&#10;&#10;    private static boolean confirm(String message) {&#10;        while (true) {&#10;            System.out.print(message + &quot; (y/n): &quot;);&#10;            String in = scanner.nextLine();&#10;            if (&quot;y&quot;.equalsIgnoreCase(in)) return true;&#10;            if (&quot;n&quot;.equalsIgnoreCase(in)) return false;&#10;            System.out.println(&quot;Please answer with 'y' or 'n'.&quot;);&#10;        }&#10;    }&#10;&#10;    private static String promptNonEmpty(String label) {&#10;        while (true) {&#10;            System.out.print(label);&#10;            String v = scanner.nextLine();&#10;            if (v != null) {&#10;                v = v.trim();&#10;            }&#10;            if (v != null &amp;&amp; !v.isEmpty()) {&#10;                return v;&#10;            }&#10;            System.out.println(&quot;Value is required. Please try again.&quot;);&#10;        }&#10;    }&#10;&#10;    private static String promptEmail(String label) {&#10;        while (true) {&#10;            String e = promptNonEmpty(label);&#10;            if (EMAIL_PATTERN.matcher(e).matches()) {&#10;                return e;&#10;            }&#10;            System.out.println(&quot;Invalid email format. Please try again.&quot;);&#10;        }&#10;    }&#10;&#10;    private static BigDecimal promptPositiveAmount(String label) {&#10;        while (true) {&#10;            System.out.print(label);&#10;            String input = scanner.nextLine();&#10;            try {&#10;                BigDecimal amount = new BigDecimal(input).setScale(2, RoundingMode.HALF_UP);&#10;                if (amount.compareTo(BigDecimal.ZERO) &gt; 0) {&#10;                    return amount;&#10;                }&#10;                System.out.println(&quot;Amount must be strictly positive.&quot;);&#10;            } catch (NumberFormatException ex) {&#10;                System.out.println(&quot;Invalid number. Please enter a numeric value (e.g., 1234.56).&quot;);&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/demo1/Controllers/UserController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/demo1/Controllers/UserController.java" />
              <option name="originalContent" value="package com.demo1.Controllers;&#10;&#10;import com.demo1.Models.User;&#10;import com.demo1.Services.UserService;&#10;import com.demo1.Services.impliment.UserServiceImplement;&#10;&#10;import java.util.List;&#10;import java.util.Scanner;&#10;&#10;public class UserController {&#10;    private static final Scanner scanner = new Scanner(System.in);&#10;    private static final UserService userService = new UserServiceImplement();&#10;&#10;    public static void createUser(){&#10;        System.out.print(&quot;Name: &quot;);&#10;        String name = scanner.nextLine().trim();&#10;        System.out.print(&quot;Email: &quot;);&#10;        String email = scanner.nextLine().trim();&#10;        System.out.print(&quot;Password: &quot;);&#10;        String password = scanner.nextLine();&#10;        System.out.println(&quot;Role [1-TELLER, 2-MANAGER, 3-ADMIN, 4-AUDITOR]: &quot;);&#10;        int roleChoice = scanner.nextInt();&#10;        scanner.nextLine();&#10;&#10;        User.Role role = switch (roleChoice) {&#10;            case 1 -&gt; User.Role.TELLER;&#10;            case 2 -&gt; User.Role.MANAGER;&#10;            case 3 -&gt; User.Role.ADMIN;&#10;            case 4 -&gt; User.Role.AUDITOR;&#10;            default -&gt; User.Role.TELLER;&#10;        };&#10;        userService.createUser(name, email, password, role);&#10;    }&#10;&#10;    public static void editUser(){&#10;        System.out.print(&quot;email: &quot;);&#10;        String recentEmail = scanner.nextLine().trim();&#10;&#10;        User user = userService.findByEmail(recentEmail);&#10;        if(user != null ){&#10;            System.out.println(&quot;Edit User&quot;);&#10;            System.out.print(&quot;name: &quot;);&#10;            String name = scanner.nextLine().trim();&#10;            System.out.print(&quot;Email: &quot;);&#10;            String Email = scanner.nextLine().trim();&#10;            System.out.print(&quot;Password: &quot;);&#10;            String password = scanner.nextLine();&#10;            System.out.print(&quot;Role [1-TELLER, 2-MANAGER, 3-ADMIN, 4-AUDITOR]: &quot;);&#10;            int roleChoice = scanner.nextInt();&#10;            scanner.nextLine();&#10;&#10;            User.Role role = switch (roleChoice) {&#10;                case 1 -&gt; User.Role.TELLER;&#10;                case 2 -&gt; User.Role.MANAGER;&#10;                case 3 -&gt; User.Role.ADMIN;&#10;                case 4 -&gt; User.Role.AUDITOR;&#10;                default -&gt; User.Role.TELLER;&#10;            };&#10;            userService.editUser(name, Email, password, role, recentEmail);&#10;        } else {&#10;            System.out.println(&quot;User not found.&quot;);&#10;        }&#10;    }&#10;&#10;    public static void deleteUser(){&#10;        System.out.print(&quot;email: &quot;);&#10;        String recentEmail = scanner.nextLine().trim();&#10;        User user = userService.findByEmail(recentEmail);&#10;        if(user != null){&#10;            userService.deleteUser(user);&#10;        } else {&#10;            System.out.println(&quot;User is not existed&quot;);&#10;        }&#10;    }&#10;&#10;    public static void listUsers(){&#10;        List&lt;User&gt; users = userService.findAll();&#10;        users.forEach(System.out::println);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.demo1.Controllers;&#10;&#10;import com.demo1.Models.User;&#10;import com.demo1.Services.UserService;&#10;import com.demo1.Services.impliment.UserServiceImplement;&#10;import com.demo1.Exceptions.BusinessRuleViolationException;&#10;&#10;import java.util.List;&#10;import java.util.Scanner;&#10;&#10;public class UserController {&#10;    private static final Scanner scanner = new Scanner(System.in);&#10;    private static final UserService userService = new UserServiceImplement();&#10;&#10;    public static void createUser(){&#10;        try {&#10;            System.out.print(&quot;Name: &quot;);&#10;            String name = scanner.nextLine().trim();&#10;            System.out.print(&quot;Email: &quot;);&#10;            String email = scanner.nextLine().trim();&#10;            System.out.print(&quot;Password: &quot;);&#10;            String password = scanner.nextLine();&#10;            System.out.println(&quot;Role [1-TELLER, 2-MANAGER, 3-ADMIN, 4-AUDITOR]: &quot;);&#10;            int roleChoice = scanner.nextInt();&#10;            scanner.nextLine();&#10;&#10;            User.Role role = switch (roleChoice) {&#10;                case 1 -&gt; User.Role.TELLER;&#10;                case 2 -&gt; User.Role.MANAGER;&#10;                case 3 -&gt; User.Role.ADMIN;&#10;                case 4 -&gt; User.Role.AUDITOR;&#10;                default -&gt; User.Role.TELLER;&#10;            };&#10;            userService.createUser(name, email, password, role);&#10;            System.out.println(&quot;User created successfully!&quot;);&#10;        } catch (BusinessRuleViolationException ex) {&#10;            System.out.println(ex.getMessage());&#10;        }&#10;    }&#10;&#10;    public static void editUser(){&#10;        System.out.print(&quot;email: &quot;);&#10;        String recentEmail = scanner.nextLine().trim();&#10;&#10;        User user = userService.findByEmail(recentEmail);&#10;        if(user != null ){&#10;            try {&#10;                System.out.println(&quot;Edit User&quot;);&#10;                System.out.print(&quot;name: &quot;);&#10;                String name = scanner.nextLine().trim();&#10;                System.out.print(&quot;Email: &quot;);&#10;                String Email = scanner.nextLine().trim();&#10;                System.out.print(&quot;Password: &quot;);&#10;                String password = scanner.nextLine();&#10;                System.out.print(&quot;Role [1-TELLER, 2-MANAGER, 3-ADMIN, 4-AUDITOR]: &quot;);&#10;                int roleChoice = scanner.nextInt();&#10;                scanner.nextLine();&#10;&#10;                User.Role role = switch (roleChoice) {&#10;                    case 1 -&gt; User.Role.TELLER;&#10;                    case 2 -&gt; User.Role.MANAGER;&#10;                    case 3 -&gt; User.Role.ADMIN;&#10;                    case 4 -&gt; User.Role.AUDITOR;&#10;                    default -&gt; User.Role.TELLER;&#10;                };&#10;                userService.editUser(name, Email, password, role, recentEmail);&#10;                System.out.println(&quot;User updated successfully!&quot;);&#10;            } catch (BusinessRuleViolationException ex) {&#10;                System.out.println(ex.getMessage());&#10;            }&#10;        } else {&#10;            System.out.println(&quot;User not found.&quot;);&#10;        }&#10;    }&#10;&#10;    public static void deleteUser(){&#10;        System.out.print(&quot;email: &quot;);&#10;        String recentEmail = scanner.nextLine().trim();&#10;        User user = userService.findByEmail(recentEmail);&#10;        if(user != null){&#10;            userService.deleteUser(user);&#10;        } else {&#10;            System.out.println(&quot;User is not existed&quot;);&#10;        }&#10;    }&#10;&#10;    public static void listUsers(){&#10;        List&lt;User&gt; users = userService.findAll();&#10;        users.forEach(System.out::println);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/demo1/Exceptions/BusinessRuleViolationException.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/demo1/Exceptions/BusinessRuleViolationException.java" />
              <option name="updatedContent" value="package com.demo1.Exceptions;&#10;&#10;public class BusinessRuleViolationException extends RuntimeException {&#10;    public BusinessRuleViolationException(String message) {&#10;        super(message);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/demo1/Services/impliment/AuthServiceImplement.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/demo1/Services/impliment/AuthServiceImplement.java" />
              <option name="originalContent" value="package com.demo1.Services.impliment;&#10;&#10;import com.demo1.Models.User;&#10;import com.demo1.Repository.UserRepository;&#10;import com.demo1.Repository.implement.UserRepositoryImplement;&#10;import com.demo1.Services.AuthService;&#10;&#10;public class AuthServiceImplement implements AuthService {&#10;&#10;    private final UserRepository userRepository = new UserRepositoryImplement();&#10;&#10;    public User Login(String email, String password){&#10;        User user = userRepository.findByEmail(email);&#10;        if(user != null &amp;&amp; user.getPassword().equalsIgnoreCase(password)){&#10;            return user;&#10;        }&#10;        return null;&#10;    }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.demo1.Services.impliment;&#10;&#10;import com.demo1.Exceptions.BusinessRuleViolationException;&#10;import com.demo1.Models.User;&#10;import com.demo1.Repository.UserRepository;&#10;import com.demo1.Repository.implement.UserRepositoryImplement;&#10;import com.demo1.Services.AuthService;&#10;&#10;import java.util.regex.Pattern;&#10;&#10;public class AuthServiceImplement implements AuthService {&#10;&#10;    private final UserRepository userRepository = new UserRepositoryImplement();&#10;    private static final Pattern EMAIL_PATTERN = Pattern.compile(&quot;^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$&quot;);&#10;&#10;    public User Login(String email, String password){&#10;        if (email == null || email.isBlank() || !EMAIL_PATTERN.matcher(email).matches()) {&#10;            throw new BusinessRuleViolationException(&quot;Invalid email format.&quot;);&#10;        }&#10;        if (password == null || password.isBlank()) {&#10;            throw new BusinessRuleViolationException(&quot;Password is required.&quot;);&#10;        }&#10;        User user = userRepository.findByEmail(email);&#10;        if(user != null &amp;&amp; user.getPassword().equals(password)){&#10;            return user;&#10;        }&#10;        return null; // invalid credentials&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/demo1/Services/impliment/ClientServiceImplement.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/demo1/Services/impliment/ClientServiceImplement.java" />
              <option name="originalContent" value="package com.demo1.Services.impliment;&#10;&#10;import com.demo1.Models.Client;&#10;import com.demo1.Repository.ClientRepository;&#10;import com.demo1.Repository.implement.ClientRepositoryImplement;&#10;import com.demo1.Services.ClientService;&#10;&#10;import java.math.BigDecimal;&#10;import java.util.List;&#10;import java.util.UUID;&#10;&#10;public class ClientServiceImplement implements ClientService {&#10;&#10;    private static ClientRepository clientRepository = new ClientRepositoryImplement();&#10;&#10;    public Client save(String fullName, String address, String email, Double salary, Client.Currency currency){&#10;&#10;        Client client = new Client();&#10;&#10;        client.setId(UUID.randomUUID());&#10;        client.setFullName(fullName);&#10;        client.setAddress(address);&#10;        client.setEmail(email);&#10;        client.setSalary(BigDecimal.valueOf(salary));&#10;        client.setCurrency(currency);&#10;&#10;        clientRepository.saveClient(client);&#10;&#10;        return client;&#10;    }&#10;&#10;    @Override&#10;    public Client findByEmail(String email) {&#10;        return clientRepository.findByEmail(email);&#10;    }&#10;&#10;    @Override&#10;    public void editClient(String fullName, String address, String email, Double salary, Client.Currency currency, String recentEmail) {&#10;        Client client = new Client();&#10;        client.setFullName(fullName);&#10;        client.setAddress(address);&#10;        client.setEmail(email);&#10;        client.setSalary(BigDecimal.valueOf(salary));&#10;        client.setCurrency(currency);&#10;        clientRepository.updateClient(client, recentEmail);&#10;    }&#10;&#10;    @Override&#10;    public void deleteClient(Client client) {&#10;        clientRepository.deleteClient(client);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;Client&gt; findAll() {&#10;        return clientRepository.findAll();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.demo1.Services.impliment;&#10;&#10;import com.demo1.Exceptions.BusinessRuleViolationException;&#10;import com.demo1.Models.Client;&#10;import com.demo1.Repository.ClientRepository;&#10;import com.demo1.Repository.implement.ClientRepositoryImplement;&#10;import com.demo1.Services.ClientService;&#10;&#10;import java.math.BigDecimal;&#10;import java.util.List;&#10;import java.util.UUID;&#10;import java.util.regex.Pattern;&#10;&#10;public class ClientServiceImplement implements ClientService {&#10;&#10;    private static final ClientRepository clientRepository = new ClientRepositoryImplement();&#10;    private static final Pattern EMAIL_PATTERN = Pattern.compile(&quot;^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$&quot;);&#10;&#10;    public Client save(String fullName, String address, String email, Double salary, Client.Currency currency){&#10;        validateClientFields(fullName, address, email, salary, currency);&#10;        if (clientRepository.findByEmail(email) != null) {&#10;            throw new BusinessRuleViolationException(&quot;Client email already in use.&quot;);&#10;        }&#10;        Client client = new Client();&#10;        client.setId(UUID.randomUUID());&#10;        client.setFullName(fullName.trim());&#10;        client.setAddress(address.trim());&#10;        client.setEmail(email.trim());&#10;        client.setSalary(BigDecimal.valueOf(salary));&#10;        client.setCurrency(currency);&#10;        clientRepository.saveClient(client);&#10;        return client;&#10;    }&#10;&#10;    @Override&#10;    public Client findByEmail(String email) {&#10;        return clientRepository.findByEmail(email);&#10;    }&#10;&#10;    @Override&#10;    public void editClient(String fullName, String address, String email, Double salary, Client.Currency currency, String recentEmail) {&#10;        validateClientFields(fullName, address, email, salary, currency);&#10;        if (!email.equalsIgnoreCase(recentEmail) &amp;&amp; clientRepository.findByEmail(email) != null) {&#10;            throw new BusinessRuleViolationException(&quot;Client email already in use.&quot;);&#10;        }&#10;        Client client = new Client();&#10;        client.setFullName(fullName.trim());&#10;        client.setAddress(address.trim());&#10;        client.setEmail(email.trim());&#10;        client.setSalary(BigDecimal.valueOf(salary));&#10;        client.setCurrency(currency);&#10;        clientRepository.updateClient(client, recentEmail);&#10;    }&#10;&#10;    @Override&#10;    public void deleteClient(Client client) {&#10;        clientRepository.deleteClient(client);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;Client&gt; findAll() {&#10;        return clientRepository.findAll();&#10;    }&#10;&#10;    private void validateClientFields(String fullName, String address, String email, Double salary, Client.Currency currency) {&#10;        if (fullName == null || fullName.isBlank()) {&#10;            throw new BusinessRuleViolationException(&quot;Full name is required.&quot;);&#10;        }&#10;        if (address == null || address.isBlank()) {&#10;            throw new BusinessRuleViolationException(&quot;Address is required.&quot;);&#10;        }&#10;        if (email == null || !EMAIL_PATTERN.matcher(email).matches()) {&#10;            throw new BusinessRuleViolationException(&quot;Invalid email format.&quot;);&#10;        }&#10;        if (salary == null || BigDecimal.valueOf(salary).compareTo(BigDecimal.ZERO) &lt;= 0) {&#10;            throw new BusinessRuleViolationException(&quot;Salary must be strictly positive.&quot;);&#10;        }&#10;        if (currency == null) {&#10;            throw new BusinessRuleViolationException(&quot;Currency is required.&quot;);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/demo1/Services/impliment/UserServiceImplement.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/demo1/Services/impliment/UserServiceImplement.java" />
              <option name="originalContent" value="package com.demo1.Services.impliment;&#10;&#10;import com.demo1.Models.User;&#10;import com.demo1.Repository.UserRepository;&#10;import com.demo1.Repository.implement.UserRepositoryImplement;&#10;import com.demo1.Services.UserService;&#10;&#10;import java.util.List;&#10;import java.util.UUID;&#10;&#10;public class UserServiceImplement implements UserService {&#10;&#10;    private static final UserRepository userRepository = new UserRepositoryImplement();&#10;&#10;    @Override&#10;    public void createUser(String name, String email, String password, User.Role role){&#10;        User user = new User();&#10;        user.setId(UUID.randomUUID());&#10;        user.setName(name);&#10;        user.setEmail(email);&#10;        user.setPassword(password);&#10;        user.setRole(role);&#10;        try{&#10;            userRepository.saveUser(user);&#10;        }catch (Exception e){&#10;            System.out.println(e.getMessage());&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public User findByEmail(String email){&#10;        return userRepository.findByEmail(email);&#10;    }&#10;&#10;    @Override&#10;    public void editUser(String name, String email, String password, User.Role role, String recentEmail){&#10;        User user = new User();&#10;        user.setName(name);&#10;        user.setEmail(email);&#10;        user.setPassword(password);&#10;        user.setRole(role);&#10;        userRepository.editUser(user, recentEmail);&#10;    }&#10;&#10;    @Override&#10;    public void deleteUser(User user){&#10;        userRepository.deleteUser(user);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;User&gt; findAll(){&#10;        return userRepository.findAll();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.demo1.Services.impliment;&#10;&#10;import com.demo1.Exceptions.BusinessRuleViolationException;&#10;import com.demo1.Models.User;&#10;import com.demo1.Repository.UserRepository;&#10;import com.demo1.Repository.implement.UserRepositoryImplement;&#10;import com.demo1.Services.UserService;&#10;&#10;import java.util.List;&#10;import java.util.UUID;&#10;import java.util.regex.Pattern;&#10;&#10;public class UserServiceImplement implements UserService {&#10;&#10;    private static final UserRepository userRepository = new UserRepositoryImplement();&#10;    private static final Pattern EMAIL_PATTERN = Pattern.compile(&quot;^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$&quot;);&#10;&#10;    @Override&#10;    public void createUser(String name, String email, String password, User.Role role){&#10;        validateUserFields(name, email, password, role);&#10;        if (userRepository.findByEmail(email) != null) {&#10;            throw new BusinessRuleViolationException(&quot;Email already in use.&quot;);&#10;        }&#10;        User user = new User();&#10;        user.setId(UUID.randomUUID());&#10;        user.setName(name.trim());&#10;        user.setEmail(email.trim());&#10;        user.setPassword(password); // TODO: hash in future&#10;        user.setRole(role);&#10;        try{&#10;            userRepository.saveUser(user);&#10;        }catch (Exception e){&#10;            throw new BusinessRuleViolationException(&quot;Unable to create user: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public User findByEmail(String email){&#10;        return userRepository.findByEmail(email);&#10;    }&#10;&#10;    @Override&#10;    public void editUser(String name, String email, String password, User.Role role, String recentEmail){&#10;        validateUserFields(name, email, password, role);&#10;        if (!email.equalsIgnoreCase(recentEmail) &amp;&amp; userRepository.findByEmail(email) != null) {&#10;            throw new BusinessRuleViolationException(&quot;Email already in use.&quot;);&#10;        }&#10;        User user = new User();&#10;        user.setName(name.trim());&#10;        user.setEmail(email.trim());&#10;        user.setPassword(password);&#10;        user.setRole(role);&#10;        try {&#10;            userRepository.editUser(user, recentEmail);&#10;        } catch (Exception e) {&#10;            throw new BusinessRuleViolationException(&quot;Unable to update user: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void deleteUser(User user){&#10;        userRepository.deleteUser(user);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;User&gt; findAll(){&#10;        return userRepository.findAll();&#10;    }&#10;&#10;    private void validateUserFields(String name, String email, String password, User.Role role) {&#10;        if (name == null || name.isBlank()) {&#10;            throw new BusinessRuleViolationException(&quot;Name is required.&quot;);&#10;        }&#10;        if (email == null || !EMAIL_PATTERN.matcher(email).matches()) {&#10;            throw new BusinessRuleViolationException(&quot;Invalid email format.&quot;);&#10;        }&#10;        if (password == null || password.length() &lt; 6) {&#10;            throw new BusinessRuleViolationException(&quot;Password must be at least 6 characters.&quot;);&#10;        }&#10;        if (role == null) {&#10;            throw new BusinessRuleViolationException(&quot;Role is required.&quot;);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>