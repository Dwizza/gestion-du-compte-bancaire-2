<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/demo1/Controllers/CreditController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/demo1/Controllers/CreditController.java" />
              <option name="originalContent" value="package com.demo1.Controllers;&#10;&#10;import com.demo1.Models.Account;&#10;import com.demo1.Models.Client;&#10;import com.demo1.Models.Credit;&#10;import com.demo1.Services.AccountService;&#10;import com.demo1.Services.ClientService;&#10;import com.demo1.Services.CreditService;&#10;&#10;import java.math.BigDecimal;&#10;import java.math.RoundingMode;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.List;&#10;import java.util.Scanner;&#10;import java.util.UUID;&#10;&#10;public class CreditController {&#10;    private static final Scanner scanner = new Scanner(System.in);&#10;    private final ClientService clientService;&#10;    private final AccountService accountService;&#10;    private final CreditService creditService;&#10;&#10;    public CreditController(ClientService clientService, AccountService accountService, CreditService creditService){&#10;        this.clientService = clientService;&#10;        this.accountService = accountService;&#10;        this.creditService = creditService;&#10;    }&#10;&#10;    public void RequestCredit(){&#10;        System.out.println(&quot;=========== Request Credit ==========&quot;);&#10;        System.out.print(&quot;Enter client CIN: &quot;);&#10;        String cin = scanner.nextLine().trim().toUpperCase();&#10;        if (cin.isEmpty()) { System.out.println(&quot;CIN is required.&quot;); return; }&#10;        Client client = clientService.findByCin(cin);&#10;        if (client == null) { System.out.println(&quot;Client not found for CIN: &quot; + cin); return; }&#10;&#10;        BigDecimal amount;&#10;        while (true) {&#10;            System.out.print(&quot;Credit amount: &quot;);&#10;            String in = scanner.nextLine().trim();&#10;            try {&#10;                amount = new BigDecimal(in).setScale(2, RoundingMode.HALF_UP);&#10;                if (amount.compareTo(BigDecimal.ZERO) &gt; 0) break;&#10;                System.out.println(&quot;Amount must be &gt; 0.&quot;);&#10;            } catch (Exception e) { System.out.println(&quot;Invalid number.&quot;); }&#10;        }&#10;&#10;        int months;&#10;        while (true) {&#10;            System.out.print(&quot;Duration in months (e.g. 12): &quot;);&#10;            String in = scanner.nextLine().trim();&#10;            try { months = Integer.parseInt(in); if (months &gt;= 1) break; } catch (Exception ignored) {}&#10;            System.out.println(&quot;Invalid duration. Must be &gt;= 1.&quot;);&#10;        }&#10;&#10;        List&lt;Account&gt; accounts = accountService.findByClient(client);&#10;        if (accounts == null || accounts.isEmpty()) { System.out.println(&quot;No accounts found for this client.&quot;); return; }&#10;&#10;        // Exclure comptes CREDIT (on crÃ©dite seulement CURRENT / SAVINGS)&#10;        List&lt;Account&gt; targetAccounts = accounts.stream()&#10;                .filter(a -&gt; a.getType() == Account.AccountType.CREDIT)&#10;                .toList();&#10;        if (targetAccounts.isEmpty()) { System.out.println(&quot;No eligible account (CURRENT/SAVINGS) to receive credit.&quot;); return; }&#10;&#10;        System.out.println(&quot;Select target account to receive credit:&quot;);&#10;        for (int i = 0; i &lt; targetAccounts.size(); i++) {&#10;            Account a = targetAccounts.get(i);&#10;            System.out.printf(&quot;%d) %s | %s | Balance: %s %s%n&quot;, i + 1, a.getAccountNumber(), a.getType(), a.getBalance(), a.getCurrency() != null ? a.getCurrency().name() : &quot;MAD&quot;);&#10;        }&#10;        int choice;&#10;        while (true) {&#10;            System.out.print(&quot;Enter choice [1-&quot; + targetAccounts.size() + &quot;]: &quot;);&#10;            String input = scanner.nextLine().trim();&#10;            try { choice = Integer.parseInt(input); if (choice &gt;= 1 &amp;&amp; choice &lt;= targetAccounts.size()) break; } catch (NumberFormatException ignored) {}&#10;            System.out.println(&quot;Invalid choice. Try again.&quot;);&#10;        }&#10;        Account targetAccount = targetAccounts.get(choice - 1);&#10;&#10;        try {&#10;            Credit credit = creditService.createCredit(client, targetAccount, amount, Credit.CreditType.SIMPLE, months);&#10;            System.out.println(&quot;Credit created successfully.&quot;);&#10;            System.out.println(&quot;Credit ID: &quot; + credit.getId());&#10;            System.out.println(&quot;Amount: &quot; + credit.getAmount());&#10;            System.out.println(&quot;Fixed Interest Rate: &quot; + credit.getInterestRate() + &quot;%&quot;);&#10;            System.out.println(&quot;Duration (months): &quot; + months);&#10;            System.out.println(&quot;Monthly Payment: &quot; + creditService.getLastMonthlyPayment());&#10;            if (credit.getEndDate() != null) {&#10;                System.out.println(&quot;Planned End Date: &quot; + credit.getEndDate().format(DateTimeFormatter.ISO_DATE));&#10;            }&#10;            System.out.println(&quot;Account credited with full amount.&quot;);&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;Credit creation failed: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    public void approveCredit(UUID creditId){&#10;&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.demo1.Controllers;&#10;&#10;import com.demo1.Models.Account;&#10;import com.demo1.Models.Client;&#10;import com.demo1.Models.Credit;&#10;import com.demo1.Services.AccountService;&#10;import com.demo1.Services.ClientService;&#10;import com.demo1.Services.CreditService;&#10;&#10;import java.math.BigDecimal;&#10;import java.math.RoundingMode;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.List;&#10;import java.util.Scanner;&#10;import java.util.UUID;&#10;&#10;public class CreditController {&#10;    private static final Scanner scanner = new Scanner(System.in);&#10;    private final ClientService clientService;&#10;    private final AccountService accountService;&#10;    private final CreditService creditService;&#10;&#10;    public CreditController(ClientService clientService, AccountService accountService, CreditService creditService){&#10;        this.clientService = clientService;&#10;        this.accountService = accountService;&#10;        this.creditService = creditService;&#10;    }&#10;&#10;    public void RequestCredit(){&#10;        System.out.println(&quot;=========== Request Credit ==========&quot;);&#10;        System.out.print(&quot;Enter client CIN: &quot;);&#10;        String cin = scanner.nextLine().trim().toUpperCase();&#10;        if (cin.isEmpty()) { System.out.println(&quot;CIN is required.&quot;); return; }&#10;        Client client = clientService.findByCin(cin);&#10;        if (client == null) { System.out.println(&quot;Client not found for CIN: &quot; + cin); return; }&#10;&#10;        BigDecimal amount;&#10;        while (true) {&#10;            System.out.print(&quot;Credit amount: &quot;);&#10;            String in = scanner.nextLine().trim();&#10;            try {&#10;                amount = new BigDecimal(in).setScale(2, RoundingMode.HALF_UP);&#10;                if (amount.compareTo(BigDecimal.ZERO) &gt; 0) break;&#10;                System.out.println(&quot;Amount must be &gt; 0.&quot;);&#10;            } catch (Exception e) { System.out.println(&quot;Invalid number.&quot;); }&#10;        }&#10;&#10;        int months;&#10;        while (true) {&#10;            System.out.print(&quot;Duration in months (e.g. 12): &quot;);&#10;            String in = scanner.nextLine().trim();&#10;            try { months = Integer.parseInt(in); if (months &gt;= 1) break; } catch (Exception ignored) {}&#10;            System.out.println(&quot;Invalid duration. Must be &gt;= 1.&quot;);&#10;        }&#10;&#10;        List&lt;Account&gt; accounts = accountService.findByClient(client);&#10;        if (accounts == null || accounts.isEmpty()) { System.out.println(&quot;No accounts found for this client.&quot;); return; }&#10;&#10;        List&lt;Account&gt; targetAccounts = accounts.stream()&#10;                .filter(a -&gt; a.getType() != Account.AccountType.CREDIT)&#10;                .toList();&#10;        if (targetAccounts.isEmpty()) { System.out.println(&quot;No eligible account (CURRENT/SAVINGS) to receive credit.&quot;); return; }&#10;&#10;        System.out.println(&quot;Select target account:&quot;);&#10;        for (int i = 0; i &lt; targetAccounts.size(); i++) {&#10;            Account a = targetAccounts.get(i);&#10;            System.out.printf(&quot;%d) %s | %s | Balance: %s %s%n&quot;, i + 1, a.getAccountNumber(), a.getType(), a.getBalance(), a.getCurrency() != null ? a.getCurrency().name() : &quot;MAD&quot;);&#10;        }&#10;        int choice;&#10;        while (true) {&#10;            System.out.print(&quot;Enter choice [1-&quot; + targetAccounts.size() + &quot;]: &quot;);&#10;            String input = scanner.nextLine().trim();&#10;            try { choice = Integer.parseInt(input); if (choice &gt;= 1 &amp;&amp; choice &lt;= targetAccounts.size()) break; } catch (NumberFormatException ignored) {}&#10;            System.out.println(&quot;Invalid choice. Try again.&quot;);&#10;        }&#10;        Account targetAccount = targetAccounts.get(choice - 1);&#10;&#10;        try {&#10;            Credit credit = creditService.createCredit(client, targetAccount, amount, Credit.CreditType.SIMPLE, months);&#10;            System.out.println(&quot;Credit request saved (status = PENDING). Waiting manager approval.&quot;);&#10;            System.out.println(&quot;Credit ID: &quot; + credit.getId());&#10;            System.out.println(&quot;Amount: &quot; + credit.getAmount());&#10;            System.out.println(&quot;Rate: 5% (fixed) | Duration: &quot; + months + &quot; months&quot;);&#10;            System.out.println(&quot;Monthly (approx): &quot; + creditService.getLastMonthlyPayment());&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;Credit creation failed: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    public void listPendingCredits() {&#10;        System.out.println(&quot;=========== Pending Credits ===========&quot;);&#10;        List&lt;Credit&gt; pending = creditService.listPending();&#10;        if (pending == null || pending.isEmpty()) { System.out.println(&quot;No pending credits.&quot;); return; }&#10;        for (Credit c : pending) {&#10;            int months = 1;&#10;            if (c.getStartDate() != null &amp;&amp; c.getEndDate() != null) {&#10;                months = Math.max(1, (int) java.time.temporal.ChronoUnit.MONTHS.between(c.getStartDate(), c.getEndDate()));&#10;            }&#10;            BigDecimal interest = c.getAmount().multiply(BigDecimal.valueOf(0.05)).setScale(2, RoundingMode.HALF_UP);&#10;            BigDecimal monthly = c.getAmount().add(interest).divide(BigDecimal.valueOf(months), 2, RoundingMode.HALF_UP);&#10;            System.out.println(&quot;ID: &quot; + c.getId());&#10;            System.out.println(&quot;  Amount: &quot; + c.getAmount());&#10;            System.out.println(&quot;  Months: &quot; + months + &quot; | Monthly: &quot; + monthly);&#10;            System.out.println(&quot;  Status: &quot; + c.getStatus());&#10;            System.out.println(&quot;  Account: &quot; + (c.getAccount() != null ? c.getAccount().getAccountNumber() : &quot;-&quot;) );&#10;            System.out.println(&quot;-------------------------------------&quot;);&#10;        }&#10;    }&#10;&#10;    public void ApproveCredits() {&#10;        listPendingCredits();&#10;        System.out.print(&quot;Enter Credit ID to approve (blank to cancel): &quot;);&#10;        String id = scanner.nextLine().trim();&#10;        if (id.isEmpty()) { System.out.println(&quot;Cancelled.&quot;); return; }&#10;        try {&#10;            UUID creditId = UUID.fromString(id);&#10;            Credit approved = creditService.approveCredit(creditId);&#10;            if (approved != null) {&#10;                System.out.println(&quot;Approved: account credited.&quot;);&#10;            } else {&#10;                System.out.println(&quot;Credit not found.&quot;);&#10;            }&#10;        } catch (IllegalArgumentException e) {&#10;            System.out.println(&quot;Invalid UUID.&quot;);&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;Approval failed: &quot; + e.getMessage());&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/demo1/Models/FeeRule.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/demo1/Models/FeeRule.java" />
              <option name="updatedContent" value="package com.demo1.Models;&#10;&#10;import java.math.BigDecimal;&#10;import java.util.UUID;&#10;&#10;public class FeeRule {&#10;    private UUID id;&#10;    private String operationType;&#10;    private String mode; // FIX or PERCENT&#10;    private BigDecimal value; // amount or percent&#10;    private String currency;&#10;    private boolean active;&#10;&#10;    public UUID getId() { return id; }&#10;    public void setId(UUID id) { this.id = id; }&#10;    public String getOperationType() { return operationType; }&#10;    public void setOperationType(String operationType) { this.operationType = operationType; }&#10;    public String getMode() { return mode; }&#10;    public void setMode(String mode) { this.mode = mode; }&#10;    public BigDecimal getValue() { return value; }&#10;    public void setValue(BigDecimal value) { this.value = value; }&#10;    public String getCurrency() { return currency; }&#10;    public void setCurrency(String currency) { this.currency = currency; }&#10;    public boolean isActive() { return active; }&#10;    public void setActive(boolean active) { this.active = active; }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/demo1/Repository/FeeRuleRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/demo1/Repository/FeeRuleRepository.java" />
              <option name="updatedContent" value="package com.demo1.Repository;&#10;&#10;import com.demo1.Models.FeeRule;&#10;&#10;public interface FeeRuleRepository {&#10;    FeeRule findActiveByOperation(String operationType);&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/demo1/Repository/implement/FeeRuleRepositoryImplement.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/demo1/Repository/implement/FeeRuleRepositoryImplement.java" />
              <option name="updatedContent" value="package com.demo1.Repository.implement;&#10;&#10;import com.demo1.Config.DatabaseConfig;&#10;import com.demo1.Models.FeeRule;&#10;import com.demo1.Repository.FeeRuleRepository;&#10;&#10;import java.sql.Connection;&#10;import java.sql.PreparedStatement;&#10;import java.sql.ResultSet;&#10;&#10;public class FeeRuleRepositoryImplement implements FeeRuleRepository {&#10;    @Override&#10;    public FeeRule findActiveByOperation(String operationType) {&#10;        String sql = &quot;SELECT id, operation_type, mode, value, currency, is_active FROM fee_rules WHERE operation_type = ? AND is_active = true LIMIT 1&quot;;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement ps = conn.prepareStatement(sql)) {&#10;            ps.setString(1, operationType);&#10;            try (ResultSet rs = ps.executeQuery()) {&#10;                if (rs.next()) {&#10;                    FeeRule r = new FeeRule();&#10;                    r.setId((java.util.UUID) rs.getObject(&quot;id&quot;));&#10;                    r.setOperationType(rs.getString(&quot;operation_type&quot;));&#10;                    r.setMode(rs.getString(&quot;mode&quot;));&#10;                    r.setValue(rs.getBigDecimal(&quot;value&quot;));&#10;                    r.setCurrency(rs.getString(&quot;currency&quot;));&#10;                    r.setActive(rs.getBoolean(&quot;is_active&quot;));&#10;                    return r;&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            throw new RuntimeException(&quot;Error loading fee rule&quot;, e);&#10;        }&#10;        return null;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/demo1/Services/impliment/CreditServiceImplement.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/demo1/Services/impliment/CreditServiceImplement.java" />
              <option name="originalContent" value="package com.demo1.Services.impliment;&#10;&#10;import com.demo1.Models.Account;&#10;import com.demo1.Models.Client;&#10;import com.demo1.Models.Credit;&#10;import com.demo1.Repository.CreditRepository;&#10;import com.demo1.Services.CreditService;&#10;&#10;import java.math.BigDecimal;&#10;import java.math.RoundingMode;&#10;import java.time.LocalDate;&#10;import java.util.UUID;&#10;&#10;public class CreditServiceImplement implements CreditService {&#10;&#10;    private final CreditRepository creditRepository;&#10;    private BigDecimal lastMonthly = BigDecimal.ZERO.setScale(2, RoundingMode.HALF_UP);&#10;&#10;    public CreditServiceImplement(CreditRepository creditRepository) {&#10;        this.creditRepository = creditRepository;&#10;    }&#10;&#10;    @Override&#10;    public Credit createCredit(Client client, Account account, BigDecimal amount, Credit.CreditType type, int months) {&#10;        if (client == null || client.getId() == null) throw new IllegalArgumentException(&quot;Client required&quot;);&#10;        if (account == null || account.getId() == null) throw new IllegalArgumentException(&quot;Account required&quot;);&#10;        if (amount == null || amount.compareTo(BigDecimal.ZERO) &lt;= 0) throw new IllegalArgumentException(&quot;Amount must be &gt; 0&quot;);&#10;        if (months &lt;= 0) throw new IllegalArgumentException(&quot;Months must be &gt;= 1&quot;);&#10;&#10;        amount = amount.setScale(2, RoundingMode.HALF_UP);&#10;        double fixedRate = 5.0; // IntÃ©rÃªt fixe global (non annuel) demandÃ©&#10;&#10;        // IntÃ©rÃªt global (5% du principal) quel que soit le nombre de mois&#10;        BigDecimal interest = amount.multiply(BigDecimal.valueOf(fixedRate)).divide(BigDecimal.valueOf(100), 2, RoundingMode.HALF_UP);&#10;        BigDecimal totalRepay = amount.add(interest).setScale(2, RoundingMode.HALF_UP);&#10;        BigDecimal monthly = totalRepay.divide(BigDecimal.valueOf(months), 2, RoundingMode.HALF_UP);&#10;        lastMonthly = monthly;&#10;&#10;        // Seuils: &lt;=50% OK (insertion PENDING), &gt;50% rejet simple, &gt;80% rejet fort&#10;        if (client.getSalary() != null) {&#10;            BigDecimal salary = client.getSalary().setScale(2, RoundingMode.HALF_UP);&#10;            BigDecimal fifty = salary.multiply(BigDecimal.valueOf(0.50)).setScale(2, RoundingMode.HALF_UP);&#10;            BigDecimal eighty = salary.multiply(BigDecimal.valueOf(0.80)).setScale(2, RoundingMode.HALF_UP);&#10;&#10;            if (monthly.compareTo(eighty) &gt; 0) {&#10;                throw new IllegalArgumentException(&quot;Monthly payment exceeds 80% of salary: credit impossible.&quot;);&#10;            }&#10;            if (monthly.compareTo(fifty) &gt; 0) {&#10;                throw new IllegalArgumentException(&quot;Monthly payment exceeds 50% of salary for chosen duration. Adjust amount or months.&quot;);&#10;            }&#10;        }&#10;&#10;        Credit credit = new Credit();&#10;        credit.setAmount(amount);&#10;        credit.setCurrency(Credit.Currency.MAD);&#10;        credit.setInterestRate(fixedRate); // stock du pourcentage global appliquÃ©&#10;        credit.setCreditType(Credit.CreditType.SIMPLE);&#10;        credit.setStatus(Credit.CreditStatus.PENDING); // en attente d'approbation manager&#10;        credit.setStartDate(LocalDate.now());&#10;        credit.setEndDate(LocalDate.now().plusMonths(months));&#10;        credit.setAccount(account);&#10;&#10;        return creditRepository.insertCredit(credit, account);&#10;    }&#10;&#10;    public Credit approveCredit(UUID creditId){&#10;        return creditRepository.approveCredit(creditId);&#10;    }&#10;&#10;    @Override&#10;    public BigDecimal getLastMonthlyPayment() { return lastMonthly; }&#10;}&#10;" />
              <option name="updatedContent" value="package com.demo1.Services.impliment;&#10;&#10;import com.demo1.Models.Account;&#10;import com.demo1.Models.Client;&#10;import com.demo1.Models.Credit;&#10;import com.demo1.Repository.CreditRepository;&#10;import com.demo1.Services.CreditService;&#10;&#10;import java.math.BigDecimal;&#10;import java.math.RoundingMode;&#10;import java.time.LocalDate;&#10;import java.util.List;&#10;import java.util.UUID;&#10;&#10;public class CreditServiceImplement implements CreditService {&#10;&#10;    private final CreditRepository creditRepository;&#10;    private BigDecimal lastMonthly = BigDecimal.ZERO.setScale(2, RoundingMode.HALF_UP);&#10;&#10;    public CreditServiceImplement(CreditRepository creditRepository) {&#10;        this.creditRepository = creditRepository;&#10;    }&#10;&#10;    @Override&#10;    public Credit createCredit(Client client, Account account, BigDecimal amount, Credit.CreditType type, int months) {&#10;        if (client == null || client.getId() == null) throw new IllegalArgumentException(&quot;Client required&quot;);&#10;        if (account == null || account.getId() == null) throw new IllegalArgumentException(&quot;Account required&quot;);&#10;        if (amount == null || amount.compareTo(BigDecimal.ZERO) &lt;= 0) throw new IllegalArgumentException(&quot;Amount must be &gt; 0&quot;);&#10;        if (months &lt;= 0) throw new IllegalArgumentException(&quot;Months must be &gt;= 1&quot;);&#10;&#10;        amount = amount.setScale(2, RoundingMode.HALF_UP);&#10;        double fixedRate = 5.0; // IntÃ©rÃªt fixe global (non annuel) demandÃ©&#10;&#10;        // IntÃ©rÃªt global (5% du principal) quel que soit le nombre de mois&#10;        BigDecimal interest = amount.multiply(BigDecimal.valueOf(fixedRate)).divide(BigDecimal.valueOf(100), 2, RoundingMode.HALF_UP);&#10;        BigDecimal totalRepay = amount.add(interest).setScale(2, RoundingMode.HALF_UP);&#10;        BigDecimal monthly = totalRepay.divide(BigDecimal.valueOf(months), 2, RoundingMode.HALF_UP);&#10;        lastMonthly = monthly;&#10;&#10;        // Seuils: &lt;=50% OK (insertion PENDING), &gt;50% rejet simple, &gt;80% rejet fort&#10;        if (client.getSalary() != null) {&#10;            BigDecimal salary = client.getSalary().setScale(2, RoundingMode.HALF_UP);&#10;            BigDecimal fifty = salary.multiply(BigDecimal.valueOf(0.50)).setScale(2, RoundingMode.HALF_UP);&#10;            BigDecimal eighty = salary.multiply(BigDecimal.valueOf(0.80)).setScale(2, RoundingMode.HALF_UP);&#10;&#10;            if (monthly.compareTo(eighty) &gt; 0) {&#10;                throw new IllegalArgumentException(&quot;Monthly payment exceeds 80% of salary: credit impossible.&quot;);&#10;            }&#10;            if (monthly.compareTo(fifty) &gt; 0) {&#10;                throw new IllegalArgumentException(&quot;Monthly payment exceeds 50% of salary for chosen duration. Adjust amount or months.&quot;);&#10;            }&#10;        }&#10;&#10;        Credit credit = new Credit();&#10;        credit.setAmount(amount);&#10;        credit.setCurrency(Credit.Currency.MAD);&#10;        credit.setInterestRate(fixedRate); // stock du pourcentage global appliquÃ©&#10;        credit.setCreditType(Credit.CreditType.SIMPLE);&#10;        credit.setStatus(Credit.CreditStatus.PENDING); // en attente d'approbation manager&#10;        credit.setStartDate(LocalDate.now());&#10;        credit.setEndDate(LocalDate.now().plusMonths(months));&#10;        credit.setAccount(account);&#10;&#10;        return creditRepository.insertCredit(credit, account);&#10;    }&#10;&#10;    @Override&#10;    public Credit approveCredit(UUID creditId){&#10;        return creditRepository.approveCredit(creditId);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;Credit&gt; listPending() {&#10;        return creditRepository.findPending();&#10;    }&#10;&#10;    @Override&#10;    public BigDecimal getLastMonthlyPayment() { return lastMonthly; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>